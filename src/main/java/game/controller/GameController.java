package game.controller;

import game.model.*;
import game.view.GameMenu;
import game.view.GameView;
import javafx.animation.AnimationTimer;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.stage.Stage;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä—ã: –ª–æ–≥–∏–∫–∞ + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
 */
public class GameController {
    private Stage stage;

    private Snake snake;
    private Food food;
    private GameView view;
    private GameMenu menu;

    private Direction direction = Direction.RIGHT;
    private boolean gameOver = false;

    private long lastUpdate = 0;
    private int score = 0;
    private int highScore = 0;

    private AnimationTimer timer;

    public GameController(Stage stage) {

        this.stage = stage;
        initGame(); // —Å–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å –∏ view
        // —Å–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ view
        Scene scene = new Scene(view.getRoot());
        // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        scene.setOnKeyPressed(e -> {
            KeyCode code = e.getCode();
            if (code == KeyCode.UP && direction != Direction.DOWN) direction = Direction.UP;
            if (code == KeyCode.DOWN && direction != Direction.UP) direction = Direction.DOWN;
            if (code == KeyCode.LEFT && direction != Direction.RIGHT) direction = Direction.LEFT;
            if (code == KeyCode.RIGHT && direction != Direction.LEFT) direction = Direction.RIGHT;

            // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ Enter
            if (code == KeyCode.ENTER && gameOver) {
                resetGame();
            }
        });

        stage.setScene(scene);
        stage.setTitle("üêç Snake Game");
        stage.show();

        menu = new GameMenu(GameView.GRID_WIDTH, GameView.GRID_HEIGHT);
        menu.setOnStart(() -> {
            Snake snake = new Snake();
            Food food = new Food();
            food.spawn(snake);

            view = new GameView(snake, food);

            stage.getScene().setRoot(view.getRoot());
            startGame(snake, food);
        });

        stage.getScene().setRoot(menu.getRoot());
    }

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–∏ –∏ view)
    private void initGame() {
        snake = new Snake();        // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Snake –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        food = new Food();
        view = new GameView(snake, food);
        food.spawn(snake);         // —Å—Ç–∞–≤–∏–º –µ–¥—É –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É
        direction = Direction.RIGHT;
        gameOver = false;
        lastUpdate = 0;
        score = 0;
    }

    // —Å—Ç–∞—Ä—Ç –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    public void startGame(Snake snake, Food food) {
        this.snake = snake;
        this.food = food;

        timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                if (lastUpdate == 0) lastUpdate = now;
                if (now - lastUpdate >= 200_000_000L) {
                    update(); // —Ä–∞–±–æ—Ç–∞–µ—Ç —Å snake –∏ food, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
                    view.render(gameOver, score, highScore);
                    lastUpdate = now;
                }
            }
        };
        timer.start();
    }

    // —Å–±—Ä–æ—Å –∏–≥—Ä—ã: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å —Å—Ü–µ–Ω—ã
    private void resetGame() {
        initGame();
        // –∑–∞–º–µ–Ω—è–µ–º –∫–æ—Ä–µ–Ω—å —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π view (—á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å)
        if (stage.getScene() != null) {
            stage.getScene().setRoot(view.getRoot());
        }
        // –Ω–µ —Ç—Ä–æ–≥–∞–µ–º highScore ‚Äî –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    }

    // –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ø–¥–µ–π—Ç –ª–æ–≥–∏–∫–∏
    private void update() {
        if (gameOver) return;
        if (snake == null || snake.getBody().isEmpty()) return; // –∑–∞—â–∏—Ç–∞

        Point head = snake.getHead();
        Point newHead = head.move(direction);

        // —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–Ω–æ–π –∏–ª–∏ —Å —Ç–µ–ª–æ–º
        if (snake.checkCollision(newHead)) {
            gameOver = true;
            // –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
            if (score > highScore) highScore = score;
            return;
        }

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º: —Å—ä–µ–ª–∏ –ª–∏ –µ–¥—É (–¥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
        boolean ateFood = newHead.equals(food.getPosition());

        // –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∑–º–µ–π–∫—É (–º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –≥–æ–ª–æ–≤—É –∏ —É–±–∏—Ä–∞—Ç—å —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ —Å—ä–µ–ª–∏)
        snake.move(newHead, food);

        if (ateFood) {
            score++;
            // —Å–ø–∞–≤–Ω–∏–º –Ω–æ–≤—É—é –µ–¥—É (snake —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω, –ø–æ—ç—Ç–æ–º—É spawn –∏—Å–∫–ª—é—á–∏—Ç –∫–ª–µ—Ç–∫–∏ –∑–º–µ–∏)
            food.spawn(snake);
        }
    }
}
